// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package scsp

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SCSPServiceClient is the client API for SCSPService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SCSPServiceClient interface {
	Report(ctx context.Context, in *ClipBoardMessage, opts ...grpc.CallOption) (*ClipBoardResp, error)
	Register(ctx context.Context, in *RegisterMessage, opts ...grpc.CallOption) (*RegisterResp, error)
	Ping(ctx context.Context, in *PingMessage, opts ...grpc.CallOption) (*PingResp, error)
}

type sCSPServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSCSPServiceClient(cc grpc.ClientConnInterface) SCSPServiceClient {
	return &sCSPServiceClient{cc}
}

func (c *sCSPServiceClient) Report(ctx context.Context, in *ClipBoardMessage, opts ...grpc.CallOption) (*ClipBoardResp, error) {
	out := new(ClipBoardResp)
	err := c.cc.Invoke(ctx, "/SCSPService/Report", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sCSPServiceClient) Register(ctx context.Context, in *RegisterMessage, opts ...grpc.CallOption) (*RegisterResp, error) {
	out := new(RegisterResp)
	err := c.cc.Invoke(ctx, "/SCSPService/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sCSPServiceClient) Ping(ctx context.Context, in *PingMessage, opts ...grpc.CallOption) (*PingResp, error) {
	out := new(PingResp)
	err := c.cc.Invoke(ctx, "/SCSPService/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SCSPServiceServer is the server API for SCSPService service.
// All implementations must embed UnimplementedSCSPServiceServer
// for forward compatibility
type SCSPServiceServer interface {
	Report(context.Context, *ClipBoardMessage) (*ClipBoardResp, error)
	Register(context.Context, *RegisterMessage) (*RegisterResp, error)
	Ping(context.Context, *PingMessage) (*PingResp, error)
	mustEmbedUnimplementedSCSPServiceServer()
}

// UnimplementedSCSPServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSCSPServiceServer struct {
}

func (UnimplementedSCSPServiceServer) Report(context.Context, *ClipBoardMessage) (*ClipBoardResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Report not implemented")
}
func (UnimplementedSCSPServiceServer) Register(context.Context, *RegisterMessage) (*RegisterResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedSCSPServiceServer) Ping(context.Context, *PingMessage) (*PingResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedSCSPServiceServer) mustEmbedUnimplementedSCSPServiceServer() {}

// UnsafeSCSPServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SCSPServiceServer will
// result in compilation errors.
type UnsafeSCSPServiceServer interface {
	mustEmbedUnimplementedSCSPServiceServer()
}

func RegisterSCSPServiceServer(s grpc.ServiceRegistrar, srv SCSPServiceServer) {
	s.RegisterService(&SCSPService_ServiceDesc, srv)
}

func _SCSPService_Report_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClipBoardMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SCSPServiceServer).Report(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SCSPService/Report",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SCSPServiceServer).Report(ctx, req.(*ClipBoardMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _SCSPService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SCSPServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SCSPService/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SCSPServiceServer).Register(ctx, req.(*RegisterMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _SCSPService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SCSPServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SCSPService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SCSPServiceServer).Ping(ctx, req.(*PingMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// SCSPService_ServiceDesc is the grpc.ServiceDesc for SCSPService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SCSPService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "SCSPService",
	HandlerType: (*SCSPServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Report",
			Handler:    _SCSPService_Report_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _SCSPService_Register_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _SCSPService_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "scsp.proto",
}
